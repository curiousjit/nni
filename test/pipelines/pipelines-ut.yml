# Azure hosted agents specification:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops

jobs:
- job: 'ubuntu_1804_python36'
  pool:
    vmImage: 'Ubuntu 18.04'

  steps:
  - script: rm -rf $(Pipeline.Workspace)/whl
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '19edabee-823b-4f46-a6f9-307afeed5334'
      definition: '46'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifactName: 'linux'
      targetPath: '$(Pipeline.Workspace)/whl'
  - script: |
      python3 -m pip install --upgrade pip setuptools --user
      python3 -m pip install pylint==2.3.1 astroid==2.2.5 --user
      python3 -m pip install coverage --user
      echo "##vso[task.setvariable variable=PATH]${HOME}/.local/bin:${PATH}"
    displayName: 'Install python tools'
  - script: |
      cd $(Pipeline.Workspace)/whl
      python3 -m pip install `ls *.whl` --user
    displayName: 'Install nni'
  - script: |
      set -e
      cd src/nni_manager
      yarn add @typescript-eslint/eslint-plugin
      yarn eslint
      # uncomment following 2 lines to enable webui eslint
      cd ../webui
      yarn add @typescript-eslint/eslint-plugin
      yarn eslint
    displayName: 'Run eslint'
  - script: |
      python3 -m pip install torch==1.5.0+cpu torchvision==0.6.0+cpu -f https://download.pytorch.org/whl/torch_stable.html --user
      python3 -m pip install tensorflow==1.15.2 --user
      python3 -m pip install keras==2.1.6 --user
      python3 -m pip install gym onnx --user
      python3 -m pip install sphinx==1.8.3 sphinx-argparse==0.2.5 sphinx-markdown-tables==0.0.9 sphinx-rtd-theme==0.4.2 sphinxcontrib-websupport==1.1.0 recommonmark==0.5.0 --user
      sudo apt-get install swig -y
      nnictl package install --name=SMAC
      nnictl package install --name=BOHB
    displayName: 'Install dependencies'
  - script: |
      set -e
      python3 -m pylint --rcfile pylintrc nni_annotation
      python3 -m pylint --rcfile pylintrc nni_cmd
      python3 -m pylint --rcfile pylintrc nni_gpu_tool
      python3 -m pylint --rcfile pylintrc nni_trial_tool
      python3 -m pylint --rcfile pylintrc nni
      python3 -m pylint --rcfile pylintrc nnicli
    displayName: 'Run pylint'
  - script: |
      python3 -m pip install flake8 --user
      EXCLUDES=./src/nni_manager/,./src/webui,./tools/nni_annotation/testcase/,./examples/trials/mnist-nas/*/mnist*.py,./examples/trials/nas_cifar10/src/cifar10/general_child.py
      python3 -m flake8 . --count --exclude=$EXCLUDES --select=E9,F63,F72,F82 --show-source --statistics
    displayName: 'Run flake8 tests to find Python syntax errors and undefined names'
  - script: |
      cd test
      source scripts/unittest.sh
    displayName: 'Unit test'
  - script: |
      cd test
      python3 nni_test/nnitest/run_tests.py --config config/pr_tests.yml
    displayName: 'Simple test'
  - script: |
      cd docs/en_US/
      sphinx-build -M html . _build -W
    displayName: 'Sphinx Documentation Build check'

- job: 'ubuntu_1604_python35_legacy_torch'
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - script: rm -rf $(Pipeline.Workspace)/whl
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '19edabee-823b-4f46-a6f9-307afeed5334'
      definition: '46'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifactName: 'linux'
      targetPath: '$(Pipeline.Workspace)/whl'
  - script: |
      python3 -m pip install --upgrade pip setuptools --user
      python3 -m pip install coverage --user
      echo "##vso[task.setvariable variable=PATH]${HOME}/.local/bin:${PATH}"
    displayName: 'Install python tools'
  - script: |
      cd $(Pipeline.Workspace)/whl
      python3 -m pip install `ls *.whl`
    displayName: 'Install nni'
  - script: |
      python3 -m pip install torch==1.3.1+cpu torchvision==0.4.2+cpu -f https://download.pytorch.org/whl/torch_stable.html --user
      python3 -m pip install tensorflow==1.15.2 --user
      python3 -m pip install keras==2.1.6 --user
      python3 -m pip install gym onnx --user
      sudo apt-get install swig -y
      nnictl package install --name=SMAC
      nnictl package install --name=BOHB
    displayName: 'Install dependencies'
  - script: |
      cd test
      source scripts/unittest.sh
    displayName: 'Unit test'
  - script: |
      cd test
      python3 nni_test/nnitest/run_tests.py --config config/pr_tests.yml
    displayName: 'Simple test'


- job: 'macos_1015_python37'
  pool:
    vmImage: 'macOS-10.15'

  steps:
  - script: rm -rf $(Pipeline.Workspace)/whl
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '19edabee-823b-4f46-a6f9-307afeed5334'
      definition: '46'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifactName: 'mac'
      targetPath: '$(Pipeline.Workspace)/whl'
  - script: python3 -m pip install --upgrade pip setuptools
    displayName: 'Install python tools'
  - script: |
      cd $(Pipeline.Workspace)/whl
      python3 -m pip install `ls *.whl` --user
      echo "##vso[task.setvariable variable=PATH]${HOME}/Library/Python/3.7/bin:${PATH}"
    displayName: 'Install nni'
  - script: |
      # pytorch Mac binary does not support CUDA, default is cpu version
      python3 -m pip install torchvision==0.6.0 torch==1.5.0 --user
      python3 -m pip install tensorflow==1.15.2 --user
      brew install swig@3
      # rm /usr/local/bin/swig
      # ln -s /usr/local/opt/swig\@3/bin/swig /usr/local/bin/swig
      export PATH="/usr/local/opt/swig@3/bin:$PATH"
      nnictl package install --name=SMAC
    displayName: 'Install dependencies'
  - script: |
      cd test
      source scripts/unittest.sh
    displayName: 'Unit test'
  - script: |
      cd test
      python3 nni_test/nnitest/run_tests.py --config config/pr_tests.yml
    displayName: 'Simple test'

- job: 'win2016_python37'
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - script: if exist $(Pipeline.Workspace)\whl rmdir /s /q $(Pipeline.Workspace)\whl
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'specific'
      project: '19edabee-823b-4f46-a6f9-307afeed5334'
      definition: '46'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latest'
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifactName: 'win64'
      targetPath: '$(Pipeline.Workspace)/whl'
  - script: |
      cd $(Pipeline.Workspace)/whl
      FOR %%G IN ("*.whl") DO python -m pip install %%G --user
    displayName: 'Install nni'
  - script: |
      python -m pip install scikit-learn==0.20.0 --user
      python -m pip install keras==2.1.6 --user
      python -m pip install torch==1.5.0+cpu torchvision==0.6.0+cpu -f https://download.pytorch.org/whl/torch_stable.html --user
      python -m pip install tensorflow==1.15.2 --user
    displayName: 'Install dependencies'
  - script: |
      cd test
      powershell.exe -file scripts/unittest.ps1
    displayName: 'unit test'
  - script: |
      cd test
      python nni_test/nnitest/run_tests.py --config config/pr_tests.yml
    displayName: 'Simple test'
