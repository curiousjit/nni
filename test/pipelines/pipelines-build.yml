# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

jobs:
- job: 'versionJob'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      Python36:
        PYTHON_VERSION: '3.6'
  steps:
  - script: |
      if [ $(build_type) = 'release' ]
      then
        export BRANCH_TAG=`git describe --tags --abbrev=0`
        echo $BRANCH_TAG
        if [[ $BRANCH_TAG = $(build_version) && $BRANCH_TAG =~ ^v[0-9](.[0-9]){1,3}$ ]]; then
          echo 'Build version match branch tag'
        else
          echo 'Build version does not match branch tag'
          exit 1
        fi
      elif [ $(build_type) = 'prerelease' ]
      then
        echo $(build_version)
        if [[ $(build_version) =~ ^v[0-9](.[0-9]){1,3}$ ]]; then
          echo 'valid build version $(build_version) '
          echo `git describe --tags --abbrev=0`
        else
          echo 'invalid build version $(build_version) '
          exit 1
        fi
      else
        # NNI build scripts (Makefile) uses branch tag as package version number
        # git tag $(build_version)
        echo "##vso[task.setvariable variable=version_string;isOutput=true]$(Build.SourceBranchName).`git show --format=%h.%cd --no-patch --date=format:'%Y%m%d-%H%M%S'`"
      fi
    name: version
  - script: echo $(version.version_string)
    displayName: 'show version string'


- job: 'Build_ubuntu'
  dependsOn: versionJob
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      Python36:
        PYTHON_VERSION: '3.6'
  variables:
      version_string: $[ dependencies.versionJob.outputs['Python36.version.version_string'] ]
  steps:
  - script: |
      python3 -m pip install --upgrade pip setuptools --user
    displayName: 'Install setuptools'

  - script: |
      cd deployment/pypi
      if [ $(build_type) = 'release' ]
      then
        echo 'building release package...'
        make build
      else
        # NNI build scripts (Makefile) uses branch tag as package version number
        # git tag $(build_version)
        echo $(version_string)
        echo 'building dev package...'
        make version_string=$(version_string) build
      fi
    displayName: 'build nni bdsit_wheel'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/dist/*.whl'
      artifact: '$(version_string)'
      publishLocation: 'pipeline'
  - script: |
      cd deployment/docker

      if [ $(build_type) = 'prerelease' ]
      then
        docker login -u $(docker_hub_dev_user) -p $(docker_hub_dev_pwd)
        export IMG_NAME=$(dev_docker_img)
        export IMG_TAG=`git describe --tags --abbrev=0`.`date -u +%y%m%d%H%M`
        echo 'updating docker file for testpyi...'
        sed -ie 's/RUN python3 -m pip --no-cache-dir install nni/RUN python3 -m pip install --no-cache-dir --index-url https:\/\/test.pypi.org\/simple --extra-index-url https:\/\/pypi.org\/simple nni/' Dockerfile
      else
        docker login -u $(docker_hub_user) -p $(docker_hub_pwd)
        export IMG_NAME=msranni/nni
        export IMG_TAG=`git describe --tags --abbrev=0`
      fi
      echo $IMG_NAME:$IMG_TAG
      cat Dockerfile
      docker build -f Dockerfile -t $IMG_NAME:$IMG_TAG .

    condition: eq( variables['build_docker_img'], 'true')
    displayName: 'build and docker image'

- job: 'Build_macos'
  dependsOn: versionJob
  condition: succeeded()
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      Python36:
        PYTHON_VERSION: '3.6'
  variables:
      version_string: $[ dependencies.versionJob.outputs['Python36.version.version_string'] ]
  steps:
  - script: |
      python3 -m pip install --upgrade pip setuptools --user
    displayName: 'Install setuptools'

  - script: |
      make install-dependencies
    displayName: 'Install nni dependencies'

  - script: |
      cd deployment/pypi
      if [ $(build_type) = 'prerelease' ]
      then
        # NNI build scripts (Makefile) uses branch tag as package version number
        git tag $(build_version)
        echo 'building prerelease package...'
        PATH=$HOME/Library/Python/3.7/bin:$PATH make version_string=$version_string build
      else
        echo 'building release package...'
        PATH=$HOME/Library/Python/3.7/bin:$PATH make build
      fi
    displayName: 'build nni bdsit_wheel'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/dist/*.whl'
      publishLocation: 'pipeline'

- job: 'Build_win32'
  dependsOn: versionJob
  condition: succeeded()
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        PYTHON_VERSION: '3.6'
  variables:
      version_string: $[ dependencies.versionJob.outputs['Python36.version.version_string'] ]
  steps:
  - powershell: |
      python -m pip install --upgrade pip setuptools
    displayName: 'Install setuptools'

  - powershell: |
      cd deployment\pypi
      if($env:BUILD_TYPE -eq 'release'){
        Write-Host 'building release package...'
        .\install.ps1 -version_os 32 -version_string $env:version_string
      }
      else{
        # NNI build scripts (powershell) uses branch tag as package version number
        # git tag $env:BUILD_VERSION
        Write-Host 'building prerelease package...'
        .\install.ps1 -version_os 32 -version_string $env:version_string
      }
    displayName: 'build nni bdsit_wheel'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/dist/*.whl'
      publishLocation: 'pipeline'


- job: 'Build_win_amd64'
  dependsOn: versionJob
  condition: succeeded()
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        PYTHON_VERSION: '3.6'
  variables:
      version_string: $[ dependencies.versionJob.outputs['Python36.version.version_string'] ]
  steps:
  - powershell: |
      python -m pip install --upgrade pip setuptools
    displayName: 'Install setuptools'

  - powershell: |
      cd deployment\pypi
      if($env:BUILD_TYPE -eq 'release'){
        Write-Host 'building release package...'
        .\install.ps1 -version_os 64 -version_string $env:version_string
      }
      else{
        # NNI build scripts (powershell) uses branch tag as package version number
        git tag $env:BUILD_VERSION
        Write-Host 'building dev package...'
        .\install.ps1 -version_os 64 -version_string $env:version_string
      }
    displayName: 'build nni bdsit_wheel'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/dist/*.whl'
      publishLocation: 'pipeline'
